# Copyright 2018 Xanadu Quantum Technologies Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ===========================================
# Blackbird quantum assembly language example
# ===========================================
# Blackbird is case sensitive.
# Newlines at the same indentation level indicate
# the end of a statement.
# Like Python, we use # for comments.

# -------------------------------------------
# Variable declarations
# -------------------------------------------
# Variable are defined at the top of the file.

# Format for defining variables:
#   type name = expression
#
# Allowed literals:
#   int: 0, 1, 5
#   float: 0.43, -0.123, 89.23e-10
#   complex: 5j, 8-1j, 0.54+0.21j
#   bool: True, False
#   str: any ASCII string surrounded by quotes, "sdfds"
int n = +5
int k = n

float m = -0.5432
float alpha = 0.5432
float x = 0.5+0.1
float Delta = 0.543

complex beta = 5.21
complex y = -0.43e-4+0.912j
complex z = +0.43e-4-0.912j

bool flag = True
str name = "program1"

# Blackbird allows expressions using the operators:
#   +, -, *, /, ** (exponentiation)
# and the intrinsic functions:
#   exp(), sin(), cos(), sqrt()
# You can also use PI and previous variable names in your
# expressions.
float gamma = 2*cos(alpha*pi)
float test = n**2

# we can also define arrays, by specifying 'array' after
# the variable type.

# Can optionally specify the shape of the array using square
# brackets directly after the variable name (i.e. U4[4, 4]))
# but this is optional.

complex array A =
    -1+2j, 2+1j
    -0.1-0.1j, 0.2-2j

complex array U4[4, 4] =
    -0.23191638+0.17828953j,  0.58457815+0.41415933j, -0.05795454-0.46965132j,  0.37146591+0.19811629j
    +0.42259383+0.56368926j, -0.42219920+0.04735544j, -0.18902308-0.01590913j,  0.33017685+0.42210731j
    -0.02396850+0.64301446j,  0.09918161+0.36797446j,  0.26993055+0.30341975j, -0.20673325-0.4827536j
    -0.03456721+0.05347453j, -0.01895343-0.40080457j,  0.75577423-0.06297101j,  0.50490422-0.06966875j

# -------------------------------------------
# Quantum program
# -------------------------------------------

# 'with' statement indicates the device to run the program on.
# Inside the indented 'with' block, all operations are queued
# to be executed on the device, in the order they appear
with fock(num_subsystems=1, cutoff_dim=7, shots=10000):
    # Statements within the 'with' block have the following form:
    #   Operation(parameters) | modes
    # Depending on the operation, parameters may be optional
    # Parameters can be variables of literals or expressions
    Coherent(alpha**2, Delta*sqrt(pi)) | 0

    # Multiple modes are specified by comma separated integers
    # Interferometer(U4) | [0, 1, 2, 3]

    # Finish with measurements
    MeasureFock() | 0
